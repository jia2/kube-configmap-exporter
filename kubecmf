#!/usr/bin/env bash
# -*- coding: utf-8 -*-

[[ -n $DEBUG ]] && set -x -e

version(){
  echo "kubecmf 0.0.1"
}

usage(){
  version
  echo "Usage: kubecmf <action> -c <configmap> -n <namespace> [-f <file|dir>] [-t <dir>] options"
}

help() {
  usage
  cat <<"EOF"
OPTIONS:
  <action>                 'import' or 'export'
                             o import - import ConfigMap from a file or files
                             o export - export ConfigMap to a file or files
  -c, --configmap <name>   ConfigMap name
  -n, --namespace <name>   Namespace ('default' by default)
  -f, --from <file|dir>    A file or directry to import
  -t, --to <dir>           Direcotry to export
  -r, --replace            Replace ConfigMap if already exists
  -h, --help               Show this message
  -v, --version            Show this command's version
HOW TO USE:
  # Import <file> to ConfigMap named <name>
  kubecmf import -c <name> -f <file>
  # Import multiple files <file1> <file2> .. to ConfigMap named <name>
  kubecmf import -c <name> -f <file1> -f <file2> 
  # Import files under directory to ConfigMap named <name>
  kubecmf import -c <name> -f <dir> 
  # Import <file> to ConfigMap named <name> ( Delete and Create ConfigMap if ConfigMap named <name> exists)
  kubecmf import -c <name> -f <file> -r
  # Export ConfigMap named <name> into <dir>
  kubecmf export -c <name> -t <dir> 
EOF
}

configmap_exist(){
  local configmap_name="$1"
  local namespace="$2"
  kubectl get configmap ${configmap_name} -n ${namespace} 2>/dev/null
}

remove_configmap_if_exists(){
  local configmap_name="$1"
  local namespace="$2"
  if configmap_exist "${configmap_name}" "${namespace}"; then
    kubectl delete configmap ${configmap_name} -n ${namespace} 1>/dev/null 2>&1
  fi
}

import_configmap(){
  local configmap_name="$1"
  local namespace="$2"
  local import_files_arrname="$3"

  eval ref=\"\${$import_files_arrname[@]}\"

  local files=( ${ref} )
  local param_import_files
  for fp in "${files[@]}"; do
    param_import_files="${param_import_files} --from-file=${fp}"
  done
  kubectl create configmap ${configmap_name} -n ${namespace}${param_import_files}
}

export_configmap(){
  local configmap_name="$1"
  local namespace="$2"
  local export_dir="$3"

  kubectl get configmap ${configmap_name} -n ${namespace} -o json |

    jq ".data" |

    awk \
    -v basedir=${export_dir} \
      'BEGIN {
        FS="\": \""
      }
      {
        # Filter lines that has 2 column (key and value)
        if (NF==2) {
          # ltrim - $1
          sub(/^[ \t\r\n]+/, "", $1)
          # remove double quote - $1
          gsub(/"/,"", $1);
          # rtrim of single quote and comma
          sub(/[\",]+$/, "", $2)
          # replace ("\"") to double quote
          gsub("\\\\\"", "\"" ,$2);
          # replace ("\n") to LF
          gsub("\\\\n", "\n" ,$2);
          of=basedir "/" $1;
          print $2 > of
      }
    }'
}

cmd_main(){
  action=""
  configmap_name=""
  namespace="default"
  import_files=()
  export_dir=""
  replace=""
  for arg in "$@"; do
    option=""
    if [ "${arg:0:1}" = "-" ]; then
      if [ "${arg:1:1}" = "-" ]; then
        option="${arg:2}"
        prevopt="${arg:2}"
      else
        index=1
        while o="${arg:$index:1}"; do
          [ -n "$o" ] || break
          option="$o"
          prevopt="$o"
          let index+=1
        done
      fi
      case "${option}" in
      "h" | "help" )
        help
        exit 0
        ;;  
      "v" | "version" )
        version
        exit 0
        ;;
      "r" | "replace" )
        replace="yes"
        ;;
      esac
    else
      if [ "${prevopt}" = "" ]; then
        action="${arg}"
      else
        case "${prevopt}" in
        "n" | "namespace" )
          namespace="${arg}"
          ;;
        "c" | "configmap" )
          configmap_name="${arg}"
          ;;
        "f" | "from" )
          if [ -f ${arg} ]; then
            import_files[${#import_files[*]}]="${arg}"
          else
            if [ -d ${arg} ]; then
              files="${arg}/*"
              for fp in ${files}; do
                if [ -f ${fp} ]; then
                  import_files[${#import_files[*]}]="${fp}"
                fi
              done
            fi
          fi
          ;;
        "t" | "to" )
          export_dir="${arg}"
          ;;
        * )
          help >&2
          exit 1
          ;;
        esac
      fi 
    fi 
  done

  if [[ "${action}" == "import" ]]; then
    if [  ${#import_files[@]} -eq 0 ]; then
      help >&2
      exit 1
    fi
    [[ -n $replace ]] && remove_configmap_if_exists ${configmap_name} ${namespace}
    import_configmap ${configmap_name} ${namespace} import_files
  elif [[ "${action}" == "export" ]]; then
    if [ ! ${export_dir} ]; then
      help >&2
      exit 1
    fi
    export_configmap ${configmap_name} ${namespace} ${export_dir}
  else
    help
    exit 1
  fi
}

cmd_main "$@"
